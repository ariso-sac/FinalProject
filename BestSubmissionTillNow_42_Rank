{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.7"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ariso-sac/FinalProject/blob/main/BestSubmissionTillNow_42_Rank\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.preprocessing import OneHotEncoder, OrdinalEncoder, LabelEncoder, StandardScaler\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\n",
        "from sklearn.naive_bayes import GaussianNB, BernoulliNB, CategoricalNB,ComplementNB,MultinomialNB\n",
        "from sklearn.tree import DecisionTreeClassifier,ExtraTreeClassifier\n",
        "from sklearn.neural_network import MLPClassifier\n",
        "from sklearn.ensemble import AdaBoostClassifier,BaggingClassifier,GradientBoostingClassifier,RandomForestClassifier,HistGradientBoostingClassifier\n",
        "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis,QuadraticDiscriminantAnalysis\n",
        "from sklearn.svm import LinearSVC, SVC, NuSVC\n",
        "from sklearn.linear_model import RidgeClassifier, LogisticRegression, Perceptron\n",
        "from sklearn.neighbors import KNeighborsClassifier"
      ],
      "metadata": {
        "id": "1LODBlpktP6I"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from xgboost import XGBClassifier"
      ],
      "metadata": {
        "id": "CWNybWARuWw9"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df=pd.read_csv('train1.csv')\n",
        "features=df.columns[:-1]\n",
        "target=df.columns[-1]\n",
        "X=df[features]\n",
        "y=df[target]"
      ],
      "metadata": {
        "id": "EDOQ4ZjmtP2F"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lb=LabelEncoder().fit(y)\n",
        "y=lb.transform(y)\n",
        "l=X.columns.to_list()\n",
        "order=['offer_expiration(hrs)','age','income_range','temperature','travel_time',\n",
        "       'restuarant_same_direction_house','western/chinese','children','cooks_regularly',\n",
        "       'prefer_home_food','visit_restaurant_with_rating_(avg)',\n",
        "       'visited_ColdDrinks','travelled_more_than_15_mins','resturant_spend_more_than_20',\n",
        "       'travel_more_than_25_mins','travel_more_than_5_mins','number_visted_bars',\n",
        "       'number_of_take_aways','restuarant_same_opposite_house',\n",
        "       'restaurant_spend_greater_than_20','is_foodie'\n",
        "      ]\n",
        "for i in order:\n",
        "    l.remove(i)"
      ],
      "metadata": {
        "id": "qCbaAUAxtPuU"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X=pd.get_dummies(data=X,columns=l)\n",
        "enc=OrdinalEncoder()\n",
        "ord=enc.fit(X)\n",
        "temp=ord.transform(X)\n",
        "X=pd.DataFrame(data=temp,columns=X.columns)"
      ],
      "metadata": {
        "id": "xnngoaOztPo-"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "     X, y, \n",
        "    test_size=0.20,\n",
        "    random_state=42,\n",
        "    shuffle=True\n",
        ")"
      ],
      "metadata": {
        "id": "KF-ju56xtPmd"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "models = []\n",
        "models.append(('loreg', LogisticRegression(max_iter=1000,\n",
        "                                           n_jobs=-1,\n",
        "                                          #  class_weight='balanced'\n",
        "                                           )))\n",
        "models.append(('svc', SVC(\n",
        "    probability=True\n",
        ")))\n",
        "models.append(('GradBoost',  HistGradientBoostingClassifier(\n",
        ")))\n",
        "models.append(('HistGradBoost',  GradientBoostingClassifier(\n",
        ")))\n",
        "models.append(('KNN',  KNeighborsClassifier(\n",
        ")))\n",
        "models.append(('forest',  RandomForestClassifier(\n",
        "    # class_weight='balanced'\n",
        ")))\n",
        "models.append(('naiveBayes_category',CategoricalNB()))\n",
        "models.append(('naiveBayes_complement',ComplementNB()))\n",
        "models.append(('xgboost',XGBClassifier()))\n",
        "models.append(('LinearDiscriminant',LinearDiscriminantAnalysis()))"
      ],
      "metadata": {
        "id": "ZGWLcwDvtPjM"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import VotingClassifier\n",
        "clf=VotingClassifier(models,n_jobs=-1,voting='soft')"
      ],
      "metadata": {
        "id": "F-t8kvUFtPgS"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "clf.fit(X_train,y_train)"
      ],
      "metadata": {
        "id": "d-s-5hvQtPdY",
        "outputId": "9e6c9a17-83cb-4fc9-d059-d506e091dbfb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "VotingClassifier(estimators=[('loreg',\n",
              "                              LogisticRegression(max_iter=1000, n_jobs=-1)),\n",
              "                             ('svc', SVC(probability=True)),\n",
              "                             ('GradBoost', HistGradientBoostingClassifier()),\n",
              "                             ('HistGradBoost', GradientBoostingClassifier()),\n",
              "                             ('KNN', KNeighborsClassifier()),\n",
              "                             ('forest', RandomForestClassifier()),\n",
              "                             ('naiveBayes_category', CategoricalNB()),\n",
              "                             ('naiveBayes_complement', ComplementNB()),\n",
              "                             ('xgboost', XGBClassifier()),\n",
              "                             ('LinearDiscriminant',\n",
              "                              LinearDiscriminantAnalysis())],\n",
              "                 n_jobs=-1, voting='soft')"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('Emperical/Training Error',clf.score(X_train,y_train))\n",
        "print('Genrealisation/Test Error',clf.score(X_test,y_test))"
      ],
      "metadata": {
        "id": "06CmagcLtPap",
        "outputId": "6a0bcea7-c775-4e2a-8fb5-ae40f2908cd2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Emperical/Training Error 0.7684540038372211\n",
            "Genrealisation/Test Error 0.6292407108239095\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "scores = cross_val_score(clf, X, y, cv=5, scoring='f1_macro', n_jobs=-1)\n",
        "print(\"Accuracy of %0.3f \\n with a \\n Standard Deviation of %0.3f\" % (scores.mean(), scores.std()))"
      ],
      "metadata": {
        "id": "-jbOIeLov8Oe",
        "outputId": "2f2665bc-393d-4bda-bd12-cc6fc93e5319",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/joblib/externals/loky/process_executor.py:703: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.\n",
            "  \"timeout or by a memory leak.\", UserWarning\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of 0.606 \n",
            " with a \n",
            " Standard Deviation of 0.007\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ans=pd.read_csv('test1.csv')\n",
        "# \n",
        "ans=pd.get_dummies(data=ans,columns=l)\n",
        "temp=ord.transform(ans)\n",
        "ans=pd.DataFrame(data=temp,columns=X.columns)\n",
        "# \n",
        "out=clf.predict(ans)\n",
        "out=lb.inverse_transform(out)\n",
        "submission=pd.DataFrame(columns=['id','Offer Accepted'])\n",
        "submission['id']=[i for i in range(len(ans))]\n",
        "submission['Offer Accepted']=out\n",
        "sns.countplot(x=submission['Offer Accepted'])"
      ],
      "metadata": {
        "id": "gHINh8OKtPTP",
        "outputId": "10303ac6-155d-4e99-d27f-fe4e40f998f1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        }
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f1f8399fd10>"
            ]
          },
          "metadata": {},
          "execution_count": 12
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "submission.to_csv('submission.csv',index=False)"
      ],
      "metadata": {
        "id": "ChzLZfhLtPQ2"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "HSh3FKOXtPOQ"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "QED0o4SxtOzX"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "VxJTO4A4tOwm"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Jw38R4V2tNvh"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "9gVTt-4BtNqH"
      },
      "execution_count": 13,
      "outputs": []
    }
  ]
}